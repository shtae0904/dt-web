/***********************************************************************[A4S] version [v2.0] Copyright ⓒ [2015] kt corp. All rights reserved.This is a proprietary software of kt corp, and you may not use this file except in compliance with license agreement with kt corp.Any redistribution or use of this software, with or without modification shall be strictly prohibited without prior written approval of kt corp,and the copyright notice above does not evidence any actual or intended publication of such software.************************************************************************//************************************************************************ 프로그램명 : KTCE text-editor* 설명     : 편집기 관리 - 스타일 관리 - 텍스트스타일 관리 기능 함수 정의* 개발자	  : 정승환* 최초작성일 : 2015.09.21* 수정이력  :************************************************************************//* * KTCE Editor * @Package * @Description : KTCE Editor 기능 **/(function() {	var editor = function() {		/*********************/		/*       변수        */		/*********************/		var layerTrigger = {				all : $('.functions button').filter(function() {					if ( $(this).hasAttr('data-target') ) {						return $(this)					}				})				, fillShape : $('#fillShape')				, shapeStroke : $('#shapeStroke')				, shapeStrokeWidth : $('#shapeStrokeWidth')			}			, layer = {				all : $('.layer')				, fillShape : $('.fillLayer')				, shapeStroke : $('.strokeFillLayer')				, shapeStrokeWidth : $('.strokeWidthLayer')				, fontColorLayer : $('.fontColorLayer')			}			, trigger = {				addShape : $('#shapeLayer button')				, fillShape : layer.fillShape.find('button')				, shapeStroke : layer.shapeStroke.find('button')				, shapeStrokeWidth : layer.shapeStrokeWidth.find('button')				, fontWeight : $('#fontWeight')				, fontItalic : $('#fontItalic')				, fontShadow : $('#fontShadow')				, fontColor : layer.fontColorLayer.find('button')				, textUnderline : $('#textUnderline')			}			, colorIndicator = $('.colorPattern').find('.crColor')			, fillColorIndicator = colorIndicator.filter(function(){				if ( $(this).parents('.fillLayer').length ) return $(this)			})			, strokeColorIndicator = colorIndicator.filter(function(){				if ( $(this).parents('.strokeFillLayer').length ) return $(this)			})			, motionSpeed = {				layer : 150			}		/*********************/		/*       실행        */		/*********************/		function fnBinding() {			// 레이어 닫기			fnDocumentBind();			// 레이어 트리거 바인딩			fnTriggerBinding();			// shape fill 트리거 바인딩			fnShapeFillBinding();			// shape stroke color 트리거 바인딩			fnShapeStrokeBinding();			// shape stroke width 트리거 바인딩			fnStrokeWidthBinding();			// 폰트 기능			fnTextFunctions();		}		/*********************/		/*       함수        */		/*********************/		// 도형 배경색 기능		function fnShapeFillBinding() {			trigger.fillShape.each(function(){				var _this = $(this)				_this.on({					click : function() {						fillBGColor(_this, KTCE.rectObj);						fnSetIndicator(KTCE.currentPaper);					}				});			});		}		// 도형 스트로크 색상 기능		function fnShapeStrokeBinding() {			trigger.shapeStroke.each(function(){				var _this = $(this)				_this.on({					click : function() {						fillStrokeColor(_this, KTCE.rectObj);						fnSetIndicator(KTCE.currentPaper);					}				});			});		}		// 도형 스트로크 넓이 기능		function fnStrokeWidthBinding(){			trigger.shapeStrokeWidth.each(function() {				var _this = $(this)					, thisWidth = parseInt(_this.text(), 10)				_this.on({					click : function() {						trigger.shapeStrokeWidth.removeClass('active');						_this.addClass('active');						$(KTCE.rectObj.node).css({							'stroke-width' : thisWidth						});					}				});			});		}		// 도형 색상 선택기 기능		function fnSetIndicator() {			fillColorIndicator.css('backgroundColor', getSVGfillColor(KTCE.rectObj));			strokeColorIndicator.css('backgroundColor', getSVGstrokeColor(KTCE.rectObj));		}		// 폰트 색상 선택기 기능		function fnSetIndicator2() {			fillColorIndicator.css('backgroundColor', getSVGfillColor(KTCE.textObj));			strokeColorIndicator.css('backgroundColor', getSVGstrokeColor(KTCE.textObj));		}		// 레이어 보이기 기능		function fnTriggerBinding() {			layerTrigger.all.each(function() {				var _this = $(this)					, thisLayer = $(_this.attr('data-target'))				_this.on({					click : function() {						if ( thisLayer.is(':hidden') ) {							layer.all.not(thisLayer).stop(true, true).slideUp(motionSpeed.layer);							thisLayer.stop(true, true).slideDown(motionSpeed.layer, function() {								if ( thisLayer.find('.scroller').length ) {									thisLayer.find('.scroller').mCustomScrollbar({										theme : 'dark'										, scrollInertia : 300									});								}							});							layerTrigger.all.removeClass('active');							_this.addClass('active');						} else {							thisLayer.stop(true, true).slideUp(motionSpeed.layer);							_this.removeClass('active');						}						return false;					}				});			});		}		// 문서의 이벤트 컨트롤		function fnDocumentBind() {			$(document).on({				'click.layerControl' : function(e) {					var e = e || window.event						, target = $(e.target)					layer.all.stop(true, true).slideUp(motionSpeed.layer);					layerTrigger.all.removeClass('active');				}			});		}		// 객체의 배경색 반환		function getSVGfillColor(obj) {			return $(obj.node).css('fill')		}		// 객체의 스트로크 색상 반환		function getSVGstrokeColor(obj) {			return $(obj.node).css('stroke')		}		// 트리거의 색상을 배경색으로 설정		function fillBGColor(trigger, obj) {			var thisColor = getColorHex(trigger);			$(obj.node).css({				fill : thisColor			});		}		// 트리거의 색상을 폰트색상으로 설정		function fillFontColor(trigger, obj) {			var thisColor = getColorHex(trigger);			obj.css({				color : thisColor			});		}		// 트리거의 색상을 스트로크 색상으로 설정		function fillStrokeColor(trigger, obj) {			var thisColor = getColorHex(trigger);			$(obj.node).css({				stroke : thisColor			});		}		// jquery 오브젝트의 color hex 값을 반환		function getColorHex(obj) {			return obj.css('backgroundColor');		}		// 텍스트 폰트 굵기		function fnFontWeight(obj) {			 			//원본 			if ( obj.data('bold') == 'true' ) {				obj.removeData('bold')				$(obj.node).css({					'font-weight' : 'normal'				});			} else {				obj.data('bold','true');				$(obj.node).css({					'font-weight' : 'bold'				});			}						// 2016-04-08 -> IE11에서는 font-weight이 bold가 적용이 되지 않아 숫자로 비교 BY HS. 			/*			if($(obj.node).css("font-weight") == 'bold'){				obj.removeData('bold');				$(obj.node).css({					'font-weight' : 'normal'				});			} else if ($(obj.node).css("font-weight") == 700) {				obj.removeData('bold');				$(obj.node).css({					'font-weight' : 'normal'				});							}			else {							obj.data('bold','true');				$(obj.node).css({					'font-weight' : 'bold'				});			}*/					}		// 텍스트 italic		function fnFontItalic(obj) {			if ( obj.data('italic') == 'true' ) {				obj.removeData('italic')				obj.attr({					'font-style' : 'normal'				});			} else {				obj.data('italic','true');				$(obj.node).css({					'font-style' : 'italic'				});			}		}		// 텍스트 언더라인		function fnTextUnderline(obj) {			if ( obj.data('underline') == 'true' ) {				obj.removeData('underline')				$(obj.node).css({					'text-decoration' : 'none'				});			} else {				obj.data('underline','true');				$(obj.node).css({					'text-decoration' : 'underline'				});			}												if ( $(obj.node).attr("data-text-underline") == null || $(obj.node).attr("data-text-underline") == 'none' ) {				$(obj.node).attr("data-text-underline", "underline");			} else {				$(obj.node).attr("data-text-underline", "none");			}					}		// 텍스트 쉐도우		function fnTextShadow(obj) {/*			//원본			if ( obj.data('shadow') == 'true' ) {				obj.removeData('shadow')				$(obj.node).css({					'text-shadow' : 'none'				});			} else {				obj.data('shadow','true');				$(obj.node).css({					'text-shadow' : '2px 2px 2px #333'				});			}*/									if ( obj.data('shadow') == 'true' ) {				obj.removeData('shadow')				$(obj.node).css({					'text-shadow' : 'none'				});			} else {				obj.data('shadow','true');				$(obj.node).css({					'text-shadow' : '2px 2px 2px #333'				});			}			//START:2015-05-03 ==========================================================================================						if(browserType.indexOf('msie') > -1){	//IE				if($(obj.node).attr('filter') == undefined){					obj.data('shadow','true');					//var paper = Snap(KTCE.currentPaper.s.node);					var paper = Snap("svg");					var _filter = paper.filter(Snap.filter.shadow(2,2,2));										obj.attr({filter: _filter});									}else{					console.log('ie remove shadow filter');					console.log(obj)					obj.removeData('shadow')					$(obj.node).removeAttr('filter');					$('defs filter').remove();				}				}else{	// NOT IE						/*				if($(obj.node).css("text-shadow") == 'none'){										//console.log('Not ie');					//원본: 2015-05-03 이전					$(obj.node).css({						'text-shadow' : '2px 2px 2px #333'					})													} else {											//console.log('Not ie');					//원본: 2015-05-03 이전					$(obj.node).css({						'text-shadow' : 'none'					});				}*/								/*				if ( obj.data('shadow') == 'true' ) {					obj.removeData('shadow')					$(obj.node).css({						'text-shadow' : 'none'					});				} else {					obj.data('shadow','true');					$(obj.node).css({						'text-shadow' : '2px 2px 2px #333'					});				}*/							}								}		// 폰트 색상		function fnFontColor(obj, color) {			$(obj.node).css({				fill : color			});		}		// 텍스트 기능 바인딩		function fnTextFunctions() {			// font-weight			trigger.fontWeight.on({				click : function() {					fnFontWeight(KTCE.textObj)				}			});			// font-italic			trigger.fontItalic.on({				click : function() {					fnFontItalic(KTCE.textObj)				}			});			// underline			trigger.textUnderline.on({				click : function() {					fnTextUnderline(KTCE.textObj)				}			});			//START: 2016-06-17 : 텍스트그림자(text shadow) 임시 사용 중지 ===============================================================	/*			if(browserType.indexOf('msie') > -1){				trigger.fontShadow.css('opacity', 0.3);			}*///END============================================================================================================================							// text-shaodw			trigger.fontShadow.on({				click : function() {//START: 2016-06-17 : 텍스트그림자(text shadow) 임시 사용 중지 ===============================================================					/***********************************************************************//*					if(browserType.indexOf('msie') > -1){						return;					}*/					/***********************************************************************///END============================================================================================================================										fnTextShadow(KTCE.textObj)				}			});			// font-color			trigger.fontColor.each(function(){				var _this = $(this)					, thisColor = getColorHex(_this);				_this.on({					click : function() {						fnFontColor(KTCE.textObj, thisColor);					}				});			});		}		// 페이퍼를 만들기		function fnCreatePaper(obj, type, width, height, content, styleId) {			var paper = {}				, s = Snap(obj)			//content = Base64.decode(content);			if ( content != '' ) {				KTCE.textContent = content.split('**');			} else {				KTCE.textContent = null;			}			// SVG 기본 세팅			s.attr({				width : width				, height : height				, viewbox : '0 0 ' + width + ' ' + height			});			KTCE.editorSVG = s;			KTCE.saveStyle = "";			fnReset(true);			fnSaveStyle();			$('#SAVE').on({				click : function() {					fnSaveStyle();					console.log('KTCE.saveStyle', KTCE.saveStyle);										setTimeout(function() {						if ( KTCE.textContent != null ) {							$.ajax({								url:'/Fwl/FlyerEditerMng.do',								type:'post',								data: {									pageFlag : 'PF_UPDATE'									, tabCode : 'style'									, styleId : styleId									, content : KTCE.saveStyle								},								success:function(data){									console.log(data.result, data.msg);									window.opener.changeStyleType('01');									alert('정상적으로 수정되었습니다.');									window.close();								}, error : function(e) {									alert('수정실패하였습니다.');								}							});						} else {							$.ajax({								url:'/Fwl/FlyerEditerMng.do',								type:'post',								data: {									pageFlag : 'PF_INSERT'									, tabCode : 'style'									, styleDstinCd : '01'									, content : KTCE.saveStyle								},								success:function(data){									console.log(data.result, data.msg);									window.opener.changeStyleType('01');									alert('정상적으로 저장되었습니다.');									window.close();								}, error : function(e) {									alert('저장 실패하였습니다.');								}							});						}					}, 1);				}			});			$('#RESET').on({				click : function() {					if ( confirm('초기화하시겠습니까? 저장되지 않은 데이터는 사라집니다.') ) {						fnReset(false);					}				}			});			$('#CANCEL').on({				click : function() {					if ( confirm('창을 닫으시겠습니까? 저장되지 않은 데이터는 사라집니다.') ) {						window.opener.changeStyleType('01');						window.close();					}				}			});			// 삭제 기능			if ( $('#DELETE').length ) {				$('#DELETE').on({					click : function() {						if ( confirm('정말 삭제하시겠습니까?') ) {							$.ajax({								url:'/Fwl/FlyerEditerMng.do',								type:'post',								data: {									pageFlag : 'PF_DELETE'									, tabCode : 'style'									, styleDstinCd : '01'									, styleId : styleId								},								success:function(data){									console.log(data.result, data.msg);									window.opener.changeStyleType('01');									alert('정상적으로 삭제되었습니다.');									window.close();								}, error : function(e) {									alert('삭제 실패하였습니다.');								}							});						}					}				})			}		}		// 스타일 저장		function fnSaveStyle() {			var shapeStyle = KTCE.rectObj.attr('style')				, textStyle = KTCE.textObj.attr('style');						KTCE.saveStyle = "";			if(browserType.indexOf('msie') > -1){	//IE				var _outerHTML = null;				try{					var _outerHTML = outerHTMLCheck($('filter')[0]);				}catch(err){}								var _svg = document.getElementById('paper1');							//console.log('filter', $(_svg).find('text').attr('filter'));								var textShadowFilterValue = _outerHTML;				var textShadowFilterAttr = $(_svg).find('text').attr('filter');								KTCE.saveStyle = Base64.encode(shapeStyle + "**" + textStyle + "**" + textShadowFilterAttr + "**" + textShadowFilterValue);			}else{								KTCE.saveStyle = Base64.encode(shapeStyle + "**" + textStyle);			}						//KTCE.saveStyle = "";			//KTCE.saveStyle = Base64.encode(shapeStyle + "**" + textStyle + "**" + textShadowFilter);		}		// 초기화		function fnReset(first) {			if ( !first ) {				KTCE.rectObj.remove();				KTCE.rectObj = null;				KTCE.textObj.remove();				KTCE.textObj = null;			}			var rect = KTCE.editorSVG .rect(30,30,340, 340)				, text = KTCE.editorSVG.text(105,210,"가나다");			if ( KTCE.textContent != null ) {				//원본				//$(rect.node).attr('style', KTCE.textContent[0]);				//$(text.node).attr('style', KTCE.textContent[1]);								$(rect.node).attr('style', decodeURIComponent(KTCE.textContent[0]));				$(text.node).attr('style', decodeURIComponent(KTCE.textContent[1]));				if(browserType.indexOf('msie') > -1){	//IE					//$('defs').append(decodeURIComponent(KTCE.textContent[3]));					//$(text.node).attr('filter', decodeURIComponent(KTCE.textContent[2]));										//console.log('filter:', decodeURIComponent(KTCE.textContent[2]))					if(decodeURIComponent(KTCE.textContent[2]) != 'undefined'){						fnTextShadow(text);												/*$(text.node).data('shadow','true');						var paper = Snap("svg");						var _filter = paper.filter(Snap.filter.shadow(2,2,2));												$(text.node).attr({filter: _filter});*/											}									}			} else {								//원본				$(rect.node).css({					'storke-width' : 2					, 'stroke' : '#f00'					, 'fill' : 'none'				});				$(text.node).css({					'font-size' : 64					, stroke : 'none'					, fill : '#000'				});			}			KTCE.rectObj = rect;			KTCE.textObj = text;		}		// SVG 이미지화		function getSVG() {			var svg = KTCE.editorSVG.clone();			svg.children().forEach(function(el,i) {				if ( el.node.nodeName != 'rect' && el.node.nodeName != 'text' ) {					el.remove();				}			});			svg.attr({				'style' : ''				, width : 400				, height : 400				, id : ''				, viewBox : '0 0 400 400'			});			svg.children()[0].attr({				x : 0				, y : 0			});			svg.children()[1].attr({				x : 55				, y : 95			});			var html = svg.outerSVG();			svg.remove();			return html;		}		// 불러온 스타일을 object에 적용		function fnTemplate(paper) {		}		// 클래스 메서드		return {			init : fnBinding			, create : fnCreatePaper		}	} // end of KTCE.temp	KTCE.textStyleEditor = editor;		var browserType = getBrowserType();	function getBrowserType(){		var word;		var agent = navigator.userAgent.toLowerCase();		var name = navigator.appName;				if(name == 'Microsoft Internet Explorer'){			word = 'msie';		} else {			if(agent.search('trident') > -1)	word='msie11';			else if(agent.search('edge/') > -1)	word='msie12';			else if(agent.search('chrome') > -1)word='chrome';			else word='';		}		return word;	}})();